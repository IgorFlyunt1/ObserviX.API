trigger:
  branches:
    include:
      - develop

pool:
  vmImage: ubuntu-latest

# Use the container image and set container-level environment variables
container:
  image: mcr.microsoft.com/azure-dev-cli-apps:latest
  env:
    ASPNETCORE_ENVIRONMENT: 'Development'

# Global pipeline variables for environment settings
variables:
  - group: AppSettings_Variable_Group
  - name: AzureAppConfiguration.ConnectionString
    value: '$(AzureAppConfiguration_ConnectionString)'
  - name: AZURE_ENV_NAME
    value: 'dev-observix'
  - name: AZURE_LOCATION
    value: 'eastus'
  - name: ASPNETCORE_ENVIRONMENT
    value: 'Development'

steps:
  # Step 1: Print out an AzureAppConfiguration.ConnectionString value for testing
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        echo "Print AzureAppConfiguration.ConnectionString value"
        echo "Value: $(AzureAppConfiguration.ConnectionString)"

  # Step 2: Perform appsettings.json value replace
  - task: FileTransform@2
    displayName: "Running File Transform Task"
    inputs:
      folderPath: '$(System.DefaultWorkingDirectory)/**/*.zip'
      enableXmlTransform: false
      jsonTargetFiles: 'appsettings.json'

  # Step 3: Install .NET 8.0 Runtime for PowerShell compatibility
  - task: UseDotNet@2
    displayName: "Install .NET Core 8.0.0 Runtime"
    inputs:
      packageType: runtime
      version: 8.0.0
      
  # Step 3.1: Install .NET 9.0 Runtime for PowerShell compatibility
  - task: UseDotNet@2
    displayName: "Install .NET Core 9.0.0 Runtime"
    inputs:
      packageType: runtime
      version: 9.0.0

  # Step 4: Install .NET 9.0 SDK for application build
  - task: UseDotNet@2
    displayName: "Install .NET 9.0 SDK"
    inputs:
      packageType: sdk
      version: 9.0.x

  # Step 5: Configure AZD to Use Azure CLI Authentication
  - pwsh: |
      azd config set auth.useAzCliAuth "true"
    displayName: "Configure AZD to Use AZ CLI Authentication"

  # Step 6: Provision Infrastructure using the Development environment
  - task: AzureCLI@2
    displayName: "Provision Infrastructure"
    inputs:
      azureSubscription: rg-dev-observix-connection-managed-identity
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        azd provision --environment $(AZURE_ENV_NAME) --no-prompt
    env:
      AZURE_SUBSCRIPTION_ID: 8037b670-1744-44ab-b27d-b8f7f4997a25
      AZURE_ENV_NAME: $(AZURE_ENV_NAME)
      AZURE_LOCATION: $(AZURE_LOCATION)
      ASPNETCORE_ENVIRONMENT: $(ASPNETCORE_ENVIRONMENT)

  # Step 7: Deploy Application using the Development environment
  - task: AzureCLI@2
    displayName: "Deploy Application"
    inputs:
      azureSubscription: rg-dev-observix-connection-managed-identity
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        azd deploy --environment $(AZURE_ENV_NAME) --no-prompt
    env:
      AZURE_SUBSCRIPTION_ID: 8037b670-1744-44ab-b27d-b8f7f4997a25
      AZURE_ENV_NAME: $(AZURE_ENV_NAME)
      AZURE_LOCATION: $(AZURE_LOCATION)
      ASPNETCORE_ENVIRONMENT: $(ASPNETCORE_ENVIRONMENT)
